import asyncio
import sqlite3
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from telebot.async_telebot import AsyncTeleBot
from telebot.util import smart_split 
from moviepy import VideoFileClip
from dotenv import load_dotenv
from openai import AsyncOpenAI
import logging
import requests
import io
from moviepy.video.io.VideoFileClip import VideoFileClip
import traceback
from pathlib import Path
import base64

logging.basicConfig(
    filename="bot_logs_v2.0.log",        
    level=logging.INFO,            
    format="%(asctime)s [%(levelname)s] %(message)s",  
    datefmt="%Y-%m-%d %H:%M:%S",
    encoding="utf-8"      
)


# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
clicked_users = {
    "analyze_messages": {},
    "summarize_messages": {},
    "load_messages": {},
    "analyze_messages_for_me": {}
}


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DB_PATH = "chat_data_v2.db"
log_file = 'bot_logs_v2.0.log'  
ADMIN_CHAT_ID = list(map(int, os.getenv("ADMIN_CHAT_ID").split(',')))
CHAT_LOGOV_ID = os.getenv("CHAT_LOGOV_ID")
PAROL = os.getenv("PAROL")
COMPANY_NAME = os.getenv("COMPANY_NAME")
INN = os.getenv("INN")
OGRN = os.getenv("OGRN")
LOCATION = os.getenv("LOCATION")
EMAIL = os.getenv("EMAIL")
PHONE = os.getenv("PHONE")
POLICY_LINK = os.getenv("POLICY_LINK")
OFFER_LINK = os.getenv("OFFER_LINK")
AI_POLICY_LINK = os.getenv("AI_POLICY_LINK")
AGREE_PD_LINK = os.getenv("AGREE_PD_LINK")
CONF_PD_LINK = os.getenv("CONF_PD_LINK")


# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –°–æ–∑–¥–∞–µ–º TeleBot
bot = AsyncTeleBot(TELEGRAM_BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()



cursor.execute("PRAGMA table_info(message_limits)")
columns = [column[1] for column in cursor.fetchall()]

if 'midia_limit' not in columns:
    cursor.execute('''
        ALTER TABLE message_limits 
        ADD COLUMN midia_limit INTEGER DEFAULT 10
    ''')
    conn.commit()




# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute("""
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message_id INTEGER UNIQUE,
        chat_id INTEGER,
        user_id INTEGER,
        thread_id INTEGER DEFAULT NONE,
        username TEXT,
        content TEXT,
        date TEXT
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS settings (
        chat_id INTEGER PRIMARY KEY,
        record BOOLEAN DEFAULT TRUE,
        [limit] INTEGER DEFAULT 100,
        style TEXT DEFAULT '–î–µ–ª–æ–≤–æ–π',
        reminder_enabled BOOLEAN DEFAULT TRUE,
        agreement BOOLEAN DEFAULT FALSE        
    )
""")

cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_counter (
        chat_id INTEGER NOT NULL,
        thread_id INTEGER DEFAULT 0,
        count INTEGER DEFAULT 0,
        PRIMARY KEY (chat_id, thread_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_limits (
        user_id INTEGER PRIMARY KEY,
        remaining_requests INTEGER DEFAULT 5,
        midia_limit INTEGER DEFAULT 10
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS vip (
        unlimited_users TEXT DEFAULT ""
    )
''')

conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ vip –ª—é–¥–µ–π (—É —Ç–µ—Ö —É –∫–æ–≥–æ –Ω–µ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã)
async def add_to_vip(username):
    cursor.execute("INSERT OR IGNORE INTO vip (unlimited_users) VALUES (?)", (username,))
    conn.commit()    


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start
@bot.message_handler(commands=['start'])
async def handle_settings(message):
    try:
        if message.chat.type != 'private':
            chat_id = message.chat.id
            chat_title = message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start –≤ –≥—Ä—É–ø–ø–µ {chat_title} (ID: {chat_id})")
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton("üî• –£–∑–Ω–∞—Ç—å –ø—Ä–æ –ü—Ä–µ–º–∏—É–º", callback_data="premium_main"))
            
            text = "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –í –∫–æ–º–∞–Ω–¥–µ!\n\nüõ† –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/premium - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/agree - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n/analyze - –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n/summarize - –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (–≤—ã–∂–∏–º–∫–∞) –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–∞—Ç–∞.\n/analyze_for_me - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/tz - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–¢–ó)\n\nüÜì –ü–æ–∫–∞ —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ —Å–∞–º–º–∞—Ä–∏"

            await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard, message_thread_id=message.message_thread_id)
        else:
            chat_id = message.chat.id
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start –≤ –ª—Å (ID: {chat_id})")
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton("üî• –£–∑–Ω–∞—Ç—å –ø—Ä–æ –ü—Ä–µ–º–∏—É–º", callback_data="premium_main"))
            
            text = "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –í –∫–æ–º–∞–Ω–¥–µ!\n\n‚ú® –ß—Ç–æ–±—ã  —Å–º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≤–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏ —è –Ω–∞—á–Ω—É –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –≤–∞—à—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n\n–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≤–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞.\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º (—ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏).\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–µ!\nüîß –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —á–∞—Ç:\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞' –∏ –Ω–∞–π–¥–∏—Ç–µ –º–µ–Ω—è: @.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã!\nüí¨ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —è –ø–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º, —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π –≤—Å—Ç—Ä–µ—á –∏ –º–Ω–æ–≥–∏–º–∏ –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.\n\n–ì–æ—Ç–æ–≤—ã –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ? –ù–∞—á–Ω–µ–º! üöÄ"

            await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard, message_thread_id=message.message_thread_id)
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")


# –ë–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª—Å (—Å –∞–¥–º–∏–Ω–∫–æ–π)
@bot.message_handler(func=lambda message: message.chat.type == 'private')
async def handle_private_messages(message):
    try:
        chat_id = message.chat.id

        is_vip = await is_vip_user(message.from_user.username)
        if is_vip:
            text = message.text
            if text.startswith(str(PAROL)):
                username = text.split(":", 1)[1].strip()
                await add_to_vip(username)
                await bot.send_message(chat_id, "<b>–ê–¥–º–∏–Ω–∫–∞</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", parse_mode='HTML', message_thread_id=message.message_thread_id)
            else:
                await bot.send_message(chat_id, "<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤ –õ–° –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –Ω–∏–º —Ä–∞–±–æ—Ç—É, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É</b>", parse_mode='HTML', message_thread_id=message.message_thread_id)
            return  
        else:
            await bot.send_message(chat_id, "<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤ –õ–° –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –Ω–∏–º —Ä–∞–±–æ—Ç—É, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É</b>", parse_mode='HTML', message_thread_id=message.message_thread_id)
            return
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")





# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP
async def is_vip_user(username):
    try:
        cursor.execute('''CREATE TABLE IF NOT EXISTS vip (
            unlimited_users TEXT DEFAULT ""
        )''')
        conn.commit()

        cursor.execute("SELECT unlimited_users FROM vip")
        result = cursor.fetchall() 

        if result:
            vip_users = []
            for row in result:
                vip_users.extend(row[0].split(","))  

            return username in vip_users
        
        return False
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")


    


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∞—Ç–µ–Ω –ª–∏ –æ–Ω 100 
    
# –û–Ω–∞ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ 100 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (—Ç–∏–ø–æ –º–æ–ª –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö?)
async def increment_message_count(chat_id, thread_id):
    try:
        thread_id = thread_id if thread_id is not None else 0

        cursor.execute("SELECT COUNT(*) FROM settings WHERE chat_id = ?", (chat_id,))
        exists = cursor.fetchone()[0]

        if not exists:
            cursor.execute('''
                INSERT INTO settings (chat_id, record, [limit], style, reminder_enabled)
                VALUES (?, TRUE, 100, '–î–µ–ª–æ–≤–æ–π', TRUE)
            ''', (chat_id,))
            conn.commit()

        cursor.execute('''
            CREATE UNIQUE INDEX IF NOT EXISTS idx_chat_thread ON message_counter (chat_id, thread_id)
        ''')

        cursor.execute('''
            INSERT INTO message_counter (chat_id, thread_id, count)
            VALUES (?, ?, 1)
            ON CONFLICT(chat_id, thread_id) DO UPDATE SET count = message_counter.count + 1
        ''', (chat_id, thread_id))
        conn.commit()

        cursor.execute('''
            SELECT count FROM message_counter WHERE chat_id = ? AND thread_id = ?
        ''', (chat_id, thread_id))
        count = cursor.fetchone()[0]

        cursor.execute('SELECT reminder_enabled FROM settings WHERE chat_id = ?', (chat_id,))
        reminder_enabled = cursor.fetchone()[0]

        if count % 100 == 0 and reminder_enabled:
            await bot.send_message(
                chat_id,
                f"<b>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {count} —Å–æ–æ–±—â–µ–Ω–∏–π {'–≤ —ç—Ç–æ–π —Ç–µ–º–µ' if thread_id != 0 else '–≤ —ç—Ç–æ–º —á–∞—Ç–µ'}.\n–ù–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö?</b>",
                parse_mode='HTML',
                message_thread_id=thread_id if thread_id != 0 else None
            )
    except Exception:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()
        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–§—É–Ω–∫—Ü–∏–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ü–æ–¥–ø–∏—Å–∫–∞"
@bot.message_handler(func=lambda message: message.text in ["–§—É–Ω–∫—Ü–∏–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ü–æ–¥–ø–∏—Å–∫–∞", "–ê–Ω–∞–ª–∏–∑", "–°–∞–º–º–∞—Ä–∏", "–õ–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"])
async def handle_main_buttons(message):
    if message.text == "–§—É–Ω–∫—Ü–∏–∏":
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        markup.add(
            KeyboardButton("–ê–Ω–∞–ª–∏–∑"),
            KeyboardButton("–°–∞–º–º–∞—Ä–∏"),
            KeyboardButton("–õ–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"),
            KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
        )
        
        await bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:",
            reply_markup=markup,
            message_thread_id=message.message_thread_id
        )

    elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await handle_settings(message)
    elif message.text == "–ü–æ–¥–ø–∏—Å–∫–∞":
        await handle_premium(message)
    elif message.text in ["–ê–Ω–∞–ª–∏–∑", "–°–∞–º–º–∞—Ä–∏", "–õ–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"]:
        await handle_command(message)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        markup_no_inline = ReplyKeyboardMarkup(resize_keyboard=True)
        markup_no_inline.add(
                    KeyboardButton("–§—É–Ω–∫—Ü–∏–∏"),
                    KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                    KeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞")
            )
        await bot.send_message(
            message.chat.id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –í –∫–æ–º–∞–Ω–¥–µ!\n\nüõ† –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/premium - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/agree - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n/analyze - –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n/summarize - –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (–≤—ã–∂–∏–º–∫–∞) –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–∞—Ç–∞.\n/analyze_for_me - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/tz - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–¢–ó)\n\nüÜì –ü–æ–∫–∞ —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ —Å–∞–º–º–∞—Ä–∏",
                        parse_mode='HTML',
                        reply_markup=markup_no_inline, message_thread_id=message.message_thread_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
@bot.message_handler(content_types=['new_chat_members'])
async def handle_new_chat_members(message):
    try:
        chat_id = message.chat.id
        
        bot_info = await bot.get_me()
        bot_id = bot_info.id  
        
        for new_member in message.new_chat_members:
            if new_member.id == bot_id:
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                        InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url=POLICY_LINK), 
                        InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", url=CONF_PD_LINK),
                        InlineKeyboardButton("–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", url=AGREE_PD_LINK)
                )
                markup_no_inline = ReplyKeyboardMarkup(resize_keyboard=True)
                markup_no_inline.add(
                    KeyboardButton("–§—É–Ω–∫—Ü–∏–∏"),
                    KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                    KeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞")
                )
                await bot.send_message(
                        message.chat.id,
                        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –í –∫–æ–º–∞–Ω–¥–µ!\n\nüõ† –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/premium - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/agree - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n/analyze - –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n/summarize - –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (–≤—ã–∂–∏–º–∫–∞) –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–∞—Ç–∞.\n/analyze_for_me - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n/tz - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–¢–ó)\n\nüÜì –ü–æ–∫–∞ —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ —Å–∞–º–º–∞—Ä–∏",
                        parse_mode='HTML',
                        reply_markup=markup_no_inline,
                        message_thread_id=message.message_thread_id
                    )
                await bot.send_message(
                    message.chat.id,
                    "–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ:\n\n"
                    "1. üìú –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</b>\n\n"
                    "2. üîí –ü—Ä–∏–Ω—è—Ç–∏–µ <b>–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                    "3. ‚úÖ –î–∞—á—É —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ <b>–æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                ,
                parse_mode='HTML',
                reply_markup=markup,
                message_thread_id=message.message_thread_id
                )
                chat_title = message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç: {chat_title} (ID: {chat_id})")
                break  
            else:
                await bot.send_message(
                    chat_id,
                    f"<b>–ü—Ä–∏–≤–µ—Ç, {new_member.first_name}!</b>",
                    parse_mode='HTML',
                    message_thread_id=message.message_thread_id

                )
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")  





# –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
async def get_style_for_chat(chat_id):
    try:
        cursor.execute("SELECT style FROM settings WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()

        if result:
            return result[0]
        return '–î–µ–ª–∏–∫–∞—Ç–Ω—ã–π'
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ –∫–∞–∫ —Ç–æ–∫–µ–Ω—ã)
def count_words(text):
    return len(text.split())



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI
async def send_to_openai(prompt, messages, user_id):
    try:
        total_words = sum(count_words(msg) for msg in messages)

        while total_words > 30000 and len(messages) > 0:
            messages.pop(0)
            total_words = sum(count_words(msg) for msg in messages)
            
        if total_words > 30000:
            return "–û—à–∏–±–∫–∞: –¥–∞–∂–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫."
        
        completion = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": prompt},
                {
                    "role": "user",
                    "content": "\n".join(messages)
                }
            ]
        )

        if completion:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
            await decrease_message_limit(user_id)
            return str(completion.choices[0].message.content).replace('#', '').replace('*', '')
        else:
            return "–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ OpenAI"
    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI")  
        
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()
        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."






# –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–¥
async def get_limit_for_chat(chat_id):
    try:
        cursor.execute("SELECT [limit] FROM settings WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()

        if result:
            return result[0]
        else:
            return 100  

    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return 100
    






# –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ record –∏–∑ –±–¥ (—Ç–∞–±–ª–∏—Ü–∞ settings)

# record - —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ª–∏ –∞–¥–º–∏–Ω —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º (–≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π)
async def get_record(chat_id):
    try:
        cursor.execute("SELECT record FROM settings WHERE chat_id = ?", (chat_id,))
        result = cursor.fetchone()

        if result:
            return bool(result[0])
        else:
            cursor.execute("""
                INSERT INTO settings (chat_id)
                VALUES (?)
            """, (chat_id,))
            conn.commit()
            return True 

    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)

        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return False



# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã (–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —É –Ω–µ–≥–æ –ª–∏–º–∏—Ç –∏ vip –ª–∏ –æ–Ω –∏–ª–∏ –Ω–µ—Ç)
async def can_user_execute_command(user_id, username):
    try:
        cursor.execute("SELECT remaining_requests FROM message_limits WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        
        if result:
            remaining_requests = result[0]

            cursor.execute("SELECT unlimited_users FROM vip WHERE unlimited_users = ?", (username,))
            vip_user = cursor.fetchone()
            if vip_user:
                return True  

            if remaining_requests > 0:
                return True  

        else:
            cursor.execute("INSERT INTO message_limits (user_id, remaining_requests, midia_limit) VALUES (?, ?, ?)", (user_id, 5, 10))
            conn.commit()
            return True

        return False  
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")



# –£–º–µ–Ω—å—à–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 1
async def decrement_midia_limit(user_id):

    cursor.execute(
        "SELECT remaining_requests, midia_limit FROM message_limits WHERE user_id = ?", 
        (user_id,)
    )
    result = cursor.fetchone()

    if result is None:
        cursor.execute(
            """
            INSERT INTO message_limits (user_id, remaining_requests, midia_limit)
            VALUES (?, ?, ?)
            """,
            (user_id, 5, 10)
        )
        conn.commit()

    remaining_requests, midia_limit = result

    if remaining_requests > 0 and midia_limit > 0:
        new_remaining_requests = remaining_requests - 1
        new_midia_limit = midia_limit - 1

        cursor.execute(
            """
            UPDATE message_limits 
            SET remaining_requests = ?, midia_limit = ?
            WHERE user_id = ?
            """,
            (new_remaining_requests, new_midia_limit, user_id)
        )
        conn.commit()







# –£–º–µ–Ω—å—à–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 1 –≤ —Ç–∞–±–ª–∏—Ü–µ remaining_requests (—É–º–µ–Ω—å—à–∞–µ—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 1)
async def decrease_message_limit(user_id):
    try:
        cursor.execute("SELECT remaining_requests, midia_limit FROM message_limits WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if result:
            remaining_requests = result[0]
            midia_limit = result[1]
            if remaining_requests > 0:
                new_remaining_requests = remaining_requests - 1
                cursor.execute(
                    "UPDATE message_limits SET remaining_requests = ? WHERE user_id = ?", 
                    (new_remaining_requests, user_id)
                )
                conn.commit()
        else:
            cursor.execute(
                "INSERT INTO message_limits (user_id, remaining_requests, midia_limit) VALUES (?, ?, ?)",
                (user_id, 4) 
            )
            conn.commit()
    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()
        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")








# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤—ã–≤–æ–¥–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.message_handler(commands=['settings'])
async def handle_settings(message):
    try:
        chat_title = message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        chat_id = message.chat.id
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /settings –≤ –≥—Ä—É–ø–ø–µ {chat_title} (ID: {chat_id})")
        chat_id = message.chat.id


        cursor.execute("SELECT record, [limit], style, reminder_enabled FROM settings WHERE chat_id = ? LIMIT 1", (chat_id,))
        result = cursor.fetchone()

        if not result:
            cursor.execute("""
                INSERT INTO settings (chat_id, record, [limit], style, reminder_enabled)
                VALUES (?, ?, ?, ?, ?)
            """, (chat_id, True, 100, "–î–µ–ª–æ–≤–æ–π", True))
            conn.commit()
            record, style_value, limit_value, reminder_enabled_value = True, "–î–µ–ª–æ–≤–æ–π", 100, True
        else:
            record, limit_value, style_value, reminder_enabled_value = result

    
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = InlineKeyboardMarkup(row_width=5)


        
        record_button = InlineKeyboardButton(f"record: {'–í–∫–ª—é—á–µ–Ω–æ' if bool(record) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}", callback_data="toggle_record")





        style_button = InlineKeyboardButton(f"style: {style_value}", callback_data="toggle_style")
        reminder_button = InlineKeyboardButton(f"reminder: {'–í–∫–ª—é—á–µ–Ω–æ' if bool(reminder_enabled_value) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}", callback_data="toggle_reminder")
        limit_button = InlineKeyboardButton(f"limit: {limit_value if limit_value else 100}", callback_data="limit")
        decrement_button = InlineKeyboardButton("-10", callback_data="decrement_limit_settings")
        increment_button = InlineKeyboardButton("+10", callback_data="increment_limit_settings")
        decrement_large_button = InlineKeyboardButton("-100", callback_data="decrement_limit_large_settings")
        increment_large_button = InlineKeyboardButton("+100", callback_data="increment_limit_large_settings")

        keyboard.add(decrement_large_button, decrement_button, limit_button, increment_button, increment_large_button)
        keyboard.add(record_button)
        keyboard.add(style_button)
        keyboard.add(reminder_button)

        await bot.send_message(
                chat_id,
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                "<b>limit</b> - –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å\n"
                "<b>record</b> - –ù—É–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "<b>style</b> - –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞.\n"
                "<b>reminder</b> - –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100 —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏).\n",
                parse_mode='HTML',
                reply_markup=keyboard,
                message_thread_id=message.message_thread_id)
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
    













# –û–±—Ä–∞–±–æ—Ç–∫–∞ /agree (–¥–ª—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è)
@bot.message_handler(commands=['agree'])
async def handle_agree(message):
    try:
        chat_id = message.chat.id

        with open("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.pdf", "rb") as doc:
            await bot.send_document(
                chat_id,
                doc,
                message_thread_id=message.message_thread_id
            )
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")





# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /premium
@bot.message_handler(commands=['premium'])
async def handle_premium(message, edit_message=False):
    try:
        chat_id = message.chat.id
        message_id = message.message_id if edit_message else None
        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [
            InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="premium_buy"),
            InlineKeyboardButton("üîÑ –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞", callback_data="premium_refund"),
            InlineKeyboardButton("üìú –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="premium_legal"),
            InlineKeyboardButton("üìÑ –û—Ñ–µ—Ä—Ç–∞", callback_data="premium_offer"),
            InlineKeyboardButton("üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data="premium_policy"),
        ]
        keyboard.add(*buttons)
        
        text = (
            "üî• <b>–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî —Ç–≤–æ–π –∫–ª—é—á –∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üîë</b>\n\n"
            "üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ?</b>\n"
            "1Ô∏è‚É£ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã.\n"
            "2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π: —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –¢–ó –ø–æ –≤–∞—à–µ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
            "3Ô∏è‚É£ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã: –¥–æ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!\n\n"
            "üåü <b>–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?</b>\n"
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –±—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π, —É–ª—É—á—à–∞—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –±—ã—Å—Ç—Ä–µ–µ. "
            "–ü—Ä–µ–º–∏—É–º ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç —Å–≤–æ–µ –≤—Ä–µ–º—è –∏ —Ö–æ—Ç—è—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —É–º–Ω–µ–µ.\n\n"
            "üéØ –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
            "üëá <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 149 ‚ÇΩ –≤ –º–µ—Å—è—Ü –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –µ—â–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.</b>"
        )

        if edit_message:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id, 
                text, 
                parse_mode="HTML", 
                reply_markup=keyboard, 
                message_thread_id=message.message_thread_id
            )
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /ai - —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò
@bot.message_handler(commands=["ai"])
async def ai_agreement(message):
    text = "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
    
    markup = InlineKeyboardMarkup()
    button = InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", AI_POLICY_LINK)
    markup.add(button)

    await bot.send_message(message.chat.id, text, reply_markup=markup, message_thread_id=message.message_thread_id)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /tz
@bot.message_handler(commands=['tz'])
async def handle_tz_command(message):
    try:
        can_media = await get_midia_limit(message.from_user.id, message.from_user.username)
        if can_media > 0:
            chat_title = message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            chat_id = message.chat.id
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /tz –≤ –≥—Ä—É–ø–ø–µ {chat_title} (ID: {chat_id})")
            
            keyboard = InlineKeyboardMarkup()
            roles = ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–î–∏–∑–∞–π–Ω–µ—Ä", "–ê–Ω–∞–ª–∏—Ç–∏–∫", "PR-–º–µ–Ω–µ–¥–∂–µ—Ä"]
            for role in roles:
                keyboard.add(InlineKeyboardButton(role, callback_data=f"role_{role}"))

            user_data[chat_id] = {'stage': 'selecting_role'}

            await bot.send_message(chat_id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å:</b>", parse_mode='HTML', reply_markup=keyboard, message_thread_id=message.message_thread_id)
        else:
            await bot.send_message(chat_id, "<b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n–ï—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–≥–æ - –Ω–∞–ø–∏—à–∏—Ç–µ @buqip</b>", parse_mode='HTML', message_thread_id=message.message_thread_id)
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")






# –û–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –≤ /tz
@bot.callback_query_handler(func=lambda call: call.data.startswith('role_'))
async def handle_role_selection(call):
    try:
        chat_id = call.message.chat.id
        role = call.data.split('_')[1]  

        user_data[chat_id]['role'] = role

        keyboard = InlineKeyboardMarkup()
        styles = ["–î–µ–ª–æ–≤–æ–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–ö—Ä–∞—Ç–∫–∏–π", "–ü–æ–¥—Ä–æ–±–Ω—ã–π"]
        for style in styles:
            keyboard.add(InlineKeyboardButton(style, callback_data=f"style_{style}"))

        user_data[chat_id]['stage'] = 'selecting_style'

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: <b>{role}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")






# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –ø–æ—Å–ª–µ /tz
@bot.callback_query_handler(func=lambda call: call.data.startswith('style_'))
async def handle_style_selection(call):
    try:
        chat_id = call.message.chat.id
        style = call.data.split('_')[1]  

        user_data[chat_id]['style'] = style

        user_data[chat_id]['stage'] = 'waiting_for_query'
        can_media = await get_midia_limit(call.from_user.id, call.from_user.username)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É: <b>{style}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∞–º –∑–∞–ø—Ä–æ—Å:\n{'(–º–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)' if can_media else '(–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º)'}",
            parse_mode='HTML'
        )
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}") 




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ tz
@bot.message_handler(func=lambda message: 
    message.chat.id in user_data and 
    user_data[message.chat.id].get('stage') == 'waiting_for_query'
)
async def handle_user_query(message):
    try:
        query = message.text
        await decrement_midia_limit(message.from_user.id)
        chat_id = message.chat.id

        user_data[chat_id]['query'] = query

        role = user_data[chat_id]['role']
        style = user_data[chat_id]['style']

        prompt = (
            f"–°–æ—Å—Ç–∞–≤—å –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–æ–ª–∏ - {role} (–Ω–∞–ø–∏—à–∏ –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º –¥–ª—è –Ω–µ–≥–æ —è–∑—ã–∫–µ) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é\n\n"
            f"–°—Ç–∏–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞: {style}."
        )
        completion = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": prompt},
                {
                    "role": "user",
                    "content": f"–¢–µ–∫—Å—Ç: {query}"
                }
            ]
        )


        if completion:
            result = str(completion.choices[0].message.content).replace('#', '').replace('*', '')
        else:
            result = "–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

        cnt = 0
        for chunk in smart_split(result):
            if cnt == 0:
                await bot.send_message(chat_id, f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à–µ –¢–ó:\n\n{chunk}", message_thread_id=message.message_thread_id)
            else:
                await bot.send_message(chat_id, chunk, message_thread_id=message.message_thread_id)
            cnt += 1

    except:
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", message_thread_id=message.message_thread_id)
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")

    user_data.pop(chat_id, None)





# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.callback_query_handler(func=lambda call: call.data in [
    "toggle_record", 
    "toggle_style", 
    "toggle_reminder",
    "decrement_limit_settings", 
    "increment_limit_settings", 
    "decrement_limit_large_settings", 
    "increment_limit_large_settings"
])
async def handle_settings_and_limit(call):
    try:
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        action = call.data  


        if action == "toggle_record":
            admins = await bot.get_chat_administrators(chat_id)
            admin_ids = {admin.user.id for admin in admins}

            if user_id not in admin_ids:
                await bot.answer_callback_query(call.id, "–ò–∑–º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
                return

            cursor.execute("SELECT record FROM settings WHERE chat_id = ?", (chat_id,))
            current_value = cursor.fetchone()[0]
            new_value = not bool(current_value)
            cursor.execute("UPDATE settings SET record = ? WHERE chat_id = ?", (int(new_value), chat_id))
        
        elif action == "toggle_style":
            styles = ["–î–µ–ª–æ–≤–æ–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–ö—Ä–∞—Ç–∫–∏–π", "–ü–æ–¥—Ä–æ–±–Ω—ã–π"]
            cursor.execute("SELECT style FROM settings WHERE chat_id = ?", (chat_id,))
            current_style = cursor.fetchone()[0]
            current_index = styles.index(current_style)
            new_index = (current_index + 1) % len(styles)
            new_style = styles[new_index]
            cursor.execute("UPDATE settings SET style = ? WHERE chat_id = ?", (new_style, chat_id))
        
        elif action == "toggle_reminder":
            cursor.execute("SELECT reminder_enabled FROM settings WHERE chat_id = ?", (chat_id,))
            current_value = cursor.fetchone()[0]
            new_value = not bool(current_value)
            cursor.execute("UPDATE settings SET reminder_enabled = ? WHERE chat_id = ?", (int(new_value), chat_id))
        
        elif action in [
            "decrement_limit_settings", 
            "increment_limit_settings", 
            "decrement_limit_large_settings", 
            "increment_limit_large_settings"
        ]:
            cursor.execute("SELECT [limit] FROM settings WHERE chat_id = ?", (chat_id,))
            current_limit = cursor.fetchone()[0]

            if action == "decrement_limit_settings":
                new_limit = max(10, current_limit - 10)
            elif action == "increment_limit_settings":
                new_limit = current_limit + 10
            elif action == "decrement_limit_large_settings":
                new_limit = max(10, current_limit - 100)
            elif action == "increment_limit_large_settings":
                new_limit = current_limit + 100
            cursor.execute("UPDATE settings SET [limit] = ? WHERE chat_id = ?", (new_limit, chat_id))

        conn.commit()

        cursor.execute("SELECT record, style, reminder_enabled, [limit] FROM settings WHERE chat_id = ?", (chat_id,))
        record, style_value, reminder_enabled_value, limit_value = cursor.fetchone()


        keyboard = InlineKeyboardMarkup(row_width=5)

        ask_button = InlineKeyboardButton(f"record: {'–í–∫–ª—é—á–µ–Ω–æ' if bool(record) else '–í—ã–∫–ª—é—á–µ–Ω–æ'}", callback_data="toggle_record")
        style_button = InlineKeyboardButton(f"style: {style_value}", callback_data="toggle_style")
        reminder_button = InlineKeyboardButton(f"reminder: {'–í–∫–ª—é—á–µ–Ω–æ' if reminder_enabled_value else '–í—ã–∫–ª—é—á–µ–Ω–æ'}", callback_data="toggle_reminder")

        decrement_button = InlineKeyboardButton("-10", callback_data="decrement_limit_settings")
        increment_button = InlineKeyboardButton("+10", callback_data="increment_limit_settings")
        decrement_large_button = InlineKeyboardButton("-100", callback_data="decrement_limit_large_settings")
        increment_large_button = InlineKeyboardButton("+100", callback_data="increment_limit_large_settings")
        limit_button = InlineKeyboardButton(f"limit: {limit_value}", callback_data="noop")

        keyboard.add(decrement_large_button, decrement_button, limit_button, increment_button, increment_large_button)
        keyboard.add(ask_button)
        keyboard.add(style_button)
        keyboard.add(reminder_button)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")






# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("premium_"))
async def handle_premium_callbacks(call):
    try:
        if call.data == "premium_buy":
            if call.message.chat.type == "private":
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –≤ –õ–° –Ω–µ–ª—å–∑—è. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.",
                    parse_mode="HTML"
                )
                return
            keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="premium_back"))
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:</b> https://example.com/buy",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        elif call.data == "premium_refund":
            text = (
                "üîÑ <b>–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —É—Å–ª—É–≥–∏</b>\n\n"
                "üìå <b>–£—Å–ª–æ–≤–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
                "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 30 –¥–Ω–µ–π.\n\n"
                "üìå <b>–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:</b>\n"
                "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ (–Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞).\n"
                "‚Ä¢ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.\n\n"
                "üìå <b>–ö–∞–∫ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç?</b>\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ {EMAIL}.\n"
                "–£–∫–∞–∂–∏—Ç–µ:\n"
                "   ‚Ä¢ –î–∞—Ç—É –æ–ø–ª–∞—Ç—ã.\n"
                "   ‚Ä¢ –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ).\n"
                "   ‚Ä¢ –ü—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞.\n\n"
                "üìå <b>–°—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:</b>\n"
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –æ–¥–æ–±—Ä–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.\n\n"
                "üìå <b>–í–∞–∂–Ω–æ:</b>\n"
                "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§ –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è."
            )
            keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="premium_back"))
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        elif call.data == "premium_legal":
            text = (
                "üìú <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                "üóÇÔ∏è <b>–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {COMPANY_NAME}\n"
                f"‚Ä¢ –ò–ù–ù: {INN}\n"
                f"‚Ä¢ –û–ì–†–ù/–û–ì–†–ù–ò–ü: {OGRN}\n"
                f"‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {LOCATION}\n\n"
                "üìß <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                f"‚Ä¢ Email –¥–ª—è —Å–≤—è–∑–∏: {EMAIL}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {PHONE}"
            )
            keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="premium_back"))
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        elif call.data == "premium_offer":
            text = (
                "üìÑ <b>–û—Ñ–µ—Ä—Ç–∞</b>\n\n"
                "üìå <b>–û —á—ë–º –¥–æ–∫—É–º–µ–Ω—Ç?</b>\n"
                "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ ‚Äî —ç—Ç–æ –¥–æ–≥–æ–≤–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –Ω–∞—à–∏–º –±–æ—Ç–æ–º. –ü—Ä–∏–Ω—è—Ç–∏–µ –æ—Ñ–µ—Ä—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥.\n\n"
                "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:</b>\n"
                "‚Ä¢ –£—Å–ª–æ–≤–∏—è –æ–∫–∞–∑–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥.\n"
                "‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.\n"
                "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –ø—Ä–∞–≤–∞ —Å—Ç–æ—Ä–æ–Ω.\n"
                "‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "üìå <b>–ö–∞–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ñ–µ—Ä—Ç–∞?</b>\n"
                "–û—Ñ–µ—Ä—Ç–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.\n\n"
                "‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</b>\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: {EMAIL}\n\n"
                "üìå –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá"
            )
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîó –°–∫–∞—á–∞—Ç—å –æ—Ñ–µ—Ä—Ç—É", url=OFFER_LINK),
                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="premium_back")
            )
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        elif call.data == "premium_policy":
            text = (
                "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                "üîí –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!\n\n"

                "–í —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
                "‚Ä¢ üìã –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º\n"
                "‚Ä¢ ‚öôÔ∏è –ö–∞–∫ –º—ã –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º\n"
                "‚Ä¢ üõ°Ô∏è –ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏—Ö –∑–∞—â–∏—Ç—É\n\n"

                "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å <b>–§–ó ‚Ññ152 ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª</b>.\n\n"

                "üìå –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá"
            )
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É", url=CONF_PD_LINK),
                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="premium_back")
            )
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        
        elif call.data == "premium_back":
            await handle_premium(call.message, True)
        
        elif call.data == "premium_main":
            text = (
                "üî• –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî —Ç–≤–æ–π –∫–ª—é—á –∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üîë\n\n"
                "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ?\n"
                "1Ô∏è‚É£ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã.\n"
                "2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π: —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –¢–ó –ø–æ –≤–∞—à–µ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
                "3Ô∏è‚É£ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã: –¥–æ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!\n\n"
                "üåü –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n"
                "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –±—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π, —É–ª—É—á—à–∞—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –±—ã—Å—Ç—Ä–µ–µ. –ü—Ä–µ–º–∏—É–º ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç —Å–≤–æ–µ –≤—Ä–µ–º—è –∏ —Ö–æ—Ç—è—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —É–º–Ω–µ–µ.\n\n"
                "üéØ –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
                "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 149 ‚ÇΩ –≤ –º–µ—Å—è—Ü –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –µ—â–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ."
            )
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="premium_buy"),
                InlineKeyboardButton("üîÑ –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞", callback_data="premium_refund"),
                InlineKeyboardButton("üìú –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="premium_legal"),
                InlineKeyboardButton("üìÑ –û—Ñ–µ—Ä—Ç–∞", callback_data="premium_offer"),
                InlineKeyboardButton("üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data="premium_policy")
            )
            await bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
    
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_message_to_db(message_id, chat_id, user_id, thread_id, username, content, date):
    try:
        cursor.execute('''
            INSERT INTO messages (message_id, chat_id, user_id, thread_id, username, content, date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (message_id, chat_id, user_id, thread_id, username, content, date))
        conn.commit()
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
async def load_messages(chat_id, thread_id, limit=100):
    try:
        query = '''
            SELECT username, content, date FROM messages
            WHERE chat_id = ? AND (thread_id = ? OR thread_id IS NULL)
            ORDER BY date DESC LIMIT ?
        '''
        cursor.execute(query, (chat_id, thread_id, limit))
        return cursor.fetchall()
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['analyze', 'analyze_for_me', 'summarize'])
async def handle_command(message):
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id

        is_can = await can_user_execute_command(user_id, message.from_user.username)

        if is_can:
            thread_id = getattr(message, "message_thread_id", None)

            cursor.execute("SELECT [limit] FROM settings WHERE chat_id = ?", (chat_id,))
            limit_result = cursor.fetchone()
            limit = limit_result[0] if limit_result else 100

            messages = await load_messages(chat_id, thread_id, limit)

            if not(messages): 
                text = '–£ –º–µ–Ω—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ —á–∞—Ç–∞'
            else:
                text = f"–°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {len(messages)}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞..."
            
            can_zapis = await get_record(chat_id)
            text += '\n\n–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞. \n–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings)' if not(can_zapis) else ''
            
            if not(messages): 
                await bot.send_message(chat_id, text, message_thread_id=message.message_thread_id)
                return
            else:
                await bot.send_message(chat_id, text, message_thread_id=message.message_thread_id)
            formatted_messages = [
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {content}, –¥–∞—Ç–∞: {date}"
                for username, content, date in messages
            ]


            style = await get_style_for_chat(chat_id)


            if message.text.startswith("/analyze_for_me") or message.text == "–õ–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                user = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''} @{message.from_user.username or ''}".strip()
                prompt = (
                                f"–¢—ã –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Å—Ç–∏–∫–µ—Ä—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ä–µ–∞–∫—Ü–∏–∏ - –≤—Å—ë —á—Ç–æ –µ—Å—Ç—å –≤ —á–∞—Ç–µ). –ü–æ–¥–≥–æ—Ç–æ–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –û–î–ù–û–ì–û –ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í –ø–µ—Ä–µ–ø–∏—Å–∫–∏ - ({user}) . \n\n"
                                "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                                "1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞. \n"
                                "2. –û—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10.\n\n"
                                f"–°—Ç–∏–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {style}."
                                "–¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑."
                                "–ï—Å–ª–∏ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ –Ω–µ—Ç—É —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —Ç–æ —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏"
                        )
            elif message.text.startswith("/analyze") or message.text == "–ê–Ω–∞–ª–∏–∑":
                prompt = (
                            "–¢—ã –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Å—Ç–∏–∫–µ—Ä—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ä–µ–∞–∫—Ü–∏–∏ - –≤—Å—ë —á—Ç–æ –µ—Å—Ç—å –≤ —á–∞—Ç–µ). –ü–æ–¥–≥–æ—Ç–æ–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–ø–∏—Å–∫–∏. \n\n"
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                            "1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏. \n"
                            "2. –û—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10.\n\n"
                            f"–°—Ç–∏–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {style}."
                            "–¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑."
                        )
            
            elif message.text.startswith("/summarize") or message.text == "–°–∞–º–º–∞—Ä–∏":
                prompt = (
                            "–°–µ–π—á–∞—Å —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Å—Ç–∏–∫–µ—Ä—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ä–µ–∞–∫—Ü–∏–∏ - –≤—Å—ë —á—Ç–æ –µ—Å—Ç—å –≤ —á–∞—Ç–µ).\n\n"
                            "–ú–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –≤—Å–µ–π —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n\n"
                            "–°–¥–µ–ª–∞–π —ç—Ç–æ, –≤–∫–ª—é—á–∏–≤ –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω —Ç–æ–≥–æ, —á—Ç–æ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã —Ç–æ–≥–æ, —á—Ç–æ –º—ã —Ä–µ—à–∏–ª–∏ –¥–µ–ª–∞—Ç—å, –Ω–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É –∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∏–¥–µ–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–∑–≤—É—á–∏–≤–∞–ª–∏.\n"
                            "–°–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ø–æ–ª–Ω—è–π, –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ –≤—ã–∂–∏–º–∫–∞.\n"
                            "–°–æ—Å—Ç–∞–≤—å —Å–∞–º–º–∞—Ä–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º.\n"
                            "–ù–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –º–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ø–æ–¥–ø—É–Ω–∫—Ç—ã –∏ —Ç–¥.), —Ç–∞–∫ –∫–∞–∫ –¢–µ–ª–µ–≥—Ä–∞–º —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç.\n"
                            "–¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏."
                        )

            response = await send_to_openai(prompt, formatted_messages, user_id)



            for chunk in smart_split(str(response).replace('#', '').replace('*', '')):
                await bot.send_message(chat_id, chunk, reply_to_message_id=message.message_id)
        else:
            await bot.send_message(chat_id, "<b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã</b>", reply_to_message_id=message.message_id, parse_mode='HTML')
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")




# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å–ª–∞–ª–∏ –≥—Å –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–¥–∞'
@bot.callback_query_handler(func=lambda call: call.data.startswith("voise_yes"))
async def voise_yes(call):
    try:
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, 
                                      message_id=call.message.message_id, 
                                      reply_markup=None)
        _, message_id, chat_id, thread_id = call.data.split(":")
        chat_id = int(chat_id)
        message_id = int(message_id)
        thread_id = None if thread_id.lower() == 'none' else int(thread_id)

        cursor.execute("SELECT content FROM messages WHERE message_id = ? AND chat_id = ? AND (thread_id = ? OR thread_id IS NULL)", 
                       (message_id, chat_id, thread_id))
        db_entry = cursor.fetchone()

        if db_entry:
            transcription = db_entry[0]
            prompt = (
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ (—Å–∞–º–º–∞—Ä–∏) —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
                "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∏–¥–µ–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è. –¢–µ–∫—Å—Ç:\n\n"
                f"{transcription}"
            )
                        
            response = await client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –¥–µ–ª–∞—é—â–∏–π —Å–∞–º–º–∞—Ä–∏ —Ç–µ–∫—Å—Ç–∞."},
                    {"role": "user", "content": prompt}
                ]
            )
            
            summary = response.choices[0].message.content
            
            await bot.send_message(
                chat_id, 
                f"–°–∞–º–º–∞—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{str(summary).replace('#', '').replace('*', '')}",
                message_thread_id=thread_id
            )
        else:
            await bot.send_message(chat_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", message_thread_id=call.message.message_thread_id)

            while True:
                cursor.execute("SELECT content FROM messages WHERE message_id = ? AND chat_id = ? AND (thread_id = ? OR thread_id IS NULL)",
                               (message_id, chat_id, thread_id))
                db_entry = cursor.fetchone()

                if db_entry:
                    transcription = db_entry[0]
                    prompt = (
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ (—Å–∞–º–º–∞—Ä–∏) —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
                        "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∏–¥–µ–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è. –¢–µ–∫—Å—Ç:\n\n"
                        f"{transcription}"
                    )
                                
                    response = await client.chat.completions.create(
                        model="gpt-4o",
                        messages=[
                            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –¥–µ–ª–∞—é—â–∏–π —Å–∞–º–º–∞—Ä–∏ —Ç–µ–∫—Å—Ç–∞."},
                            {"role": "user", "content": prompt}
                        ]
                    )
                    
                    summary = response.choices[0].message.content
                    
                    await bot.send_message(
                        chat_id, 
                        f"–°–∞–º–º–∞—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{str(summary).replace('#', '').replace('*', '')}",
                        message_thread_id=thread_id
                    )
                    break  

                await asyncio.sleep(1)

    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ voise_yes")
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)

        error_str = error_message.getvalue()
        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text', 'photo', 'video', 'audio', 'document', 'sticker', 'voice', 'video_note'])
async def handle_message(message):
    try:
        chat_id = message.chat.id
        try:
            if message.from_user.is_bot:
                return
            elif message.chat.id in user_data and user_data[message.chat.id]['stage'] == 'waiting_for_query':
                if message.voice:
                    can_media = await get_midia_limit(message.from_user.id, message.from_user.username)
                    if can_media > 0:
                        query = await process_voice(message)
                        user_data[chat_id]['query'] = query

                        role = user_data[chat_id]['role']
                        style = user_data[chat_id]['style']

                        prompt = (
                            f"–°–æ—Å—Ç–∞–≤—å –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–æ–ª–∏ - {role} (–Ω–∞–ø–∏—à–∏ –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º –¥–ª—è –Ω–µ–≥–æ —è–∑—ã–∫–µ) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é\n\n"
                            f"–°—Ç–∏–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞: {style}."
                        )
                        completion = await client.chat.completions.create(
                            model="gpt-4o",
                            messages=[
                                {"role": "system", "content": prompt},
                                {
                                    "role": "user",
                                    "content": f"–¢–µ–∫—Å—Ç: {query}"
                                }
                            ]
                        )


                        if completion:
                            result = str(completion.choices[0].message.content).replace('#', '').replace('*', '')
                        else:
                            result = "–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

                        cnt = 0
                        for chunk in smart_split(result):
                            if cnt == 0:
                                await bot.send_message(chat_id, f"–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à–µ –¢–ó:\n\n{chunk}", message_thread_id=message.message_thread_id)
                            else:
                                await bot.send_message(chat_id, chunk, message_thread_id=message.message_thread_id)
                            cnt += 1
                        await decrement_midia_limit(message.from_user.id)
                    else:
                        await bot.send_message(
                                chat_id,
                                "<b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç</b>",
                                parse_mode='HTML',
                                reply_to_message_id=message.message_id
                        )
                        return
        except:
            pass


        
        can_zapis = await get_record(chat_id)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if can_zapis:
            content = ""
            username = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''} @{message.from_user.username or ''}".strip()
            thread_id = getattr(message, "message_thread_id", None)

            if message.text:
                content += f"–¢–µ–∫—Å—Ç: {message.text.strip()}\n"

            if message.sticker:
                sticker_emoji = message.sticker.emoji or "–ë–µ–∑ —ç–º–æ–¥–∑–∏"
                content += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä: {sticker_emoji}\n"

            can_media = await get_midia_limit(message.from_user.id, message.from_user.username)
            if can_media > 0:
                if message.photo:
                    content += "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \n"
                    photo = await process_photo(message)
                    content += str(photo).replace('#', '').replace('*', '')

                if message.video:
                    content += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è):\n"
                    video = await process_video(message)
                    content += str(video).replace('#', '').replace('*', '')

                if message.audio:
                    content += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∞—É–¥–∏–æ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è):\n"
                    audio = await process_audio(message)
                    content += str(audio).replace('#', '').replace('*', '')

                if message.document:
                    file_name = message.document.file_name
                    content += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª: {file_name}\n"


                if message.voice:
                    can_media = await get_midia_limit(message.from_user.id, message.from_user.username)
                    duration = message.voice.duration
                    if can_media > 0 and duration > 40:
                            keyboard = InlineKeyboardMarkup(row_width=1)
                            callback_data = f"voise_yes:{message.message_id}:{chat_id}:{getattr(message, 'message_thread_id', 'none')}"
                            keyboard.add(InlineKeyboardButton("–î–∞", callback_data=callback_data))

                            await bot.send_message(
                                        chat_id,
                                        "–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 40 —Å–µ–∫—É–Ω–¥. \n–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –µ–≥–æ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–ª?",
                                        reply_to_message_id=message.message_id,
                                        reply_markup=keyboard
                                    )
                    content += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è):\n"
                    voice = await process_voice(message)
                    content += str(voice).replace('#', '').replace('*', '')
                if message.video_note:
                    content += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è):\n"
                    video_note = await process_video_note(message)
                    content += str(video_note).replace('#', '').replace('*', '')

                await save_message_to_db(
                            message_id=message.message_id,
                            chat_id=chat_id,
                            user_id=message.from_user.id,
                            thread_id=thread_id,
                            username=username,
                            content=content.strip(),
                            date=message.date
                )

                await increment_message_count(chat_id, thread_id)
    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)

        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")

# –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def get_midia_limit(user_id, username):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id
    cursor.execute("SELECT midia_limit FROM message_limits WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    

    cursor.execute("SELECT unlimited_users FROM vip WHERE unlimited_users = ?", (username,))
    vip_user = cursor.fetchone()
    if vip_user:
        return True  
    if result:
        return result[0]
    else:
        cursor.execute(
            "INSERT INTO message_limits (user_id, remaining_requests, midia_limit) VALUES (?, ?, ?)",
            (user_id, 5, 10)
        )
        return 10

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ        
async def process_photo(message):
    try:
        file_info = await bot.get_file(message.photo[-1].file_id)
        file_path = file_info.file_path

        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
        response = requests.get(file_url)

        if response.status_code != 200:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

        image_data = io.BytesIO(response.content)
        image_data.seek(0)

        base64_image = base64.b64encode(image_data.read()).decode('utf-8')

        image_url = f"data:image/jpeg;base64,{base64_image}"

        try:
            response = await client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–û–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. (–ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç)"},
                    {"role": "user", "content": f"{{'type': 'image_url', 'image_url': {{'url': '{image_url}'}}}}"}
                ]
            )
        except:
            return "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä"

        await decrement_midia_limit(message.from_user.id)

        return response.choices[0].message.content

    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)

        error_str = error_message.getvalue()
        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"



# –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
async def process_audio(message):
    try:
        try:
            file_info = await bot.get_file(message.audio.file_id)
        except:
            return "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∞—É–¥–∏–æ"
        file_path = file_info.file_path

        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
        response = requests.get(file_url)

        if response.status_code != 200:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ"

        audio_file = io.BytesIO(response.content)
        audio_file.name = "audio.mp3"  

        transcription = await client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file
        )

        await decrement_midia_limit(message.from_user.id)
        return transcription.text

    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ"



# –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def process_voice(message):
    try:
        try:
            file_info = await bot.get_file(message.voice.file_id)
        except:
            return "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        file_path = file_info.file_path
        
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
        response = requests.get(file_url)

        if response.status_code != 200:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        voice_file = io.BytesIO(response.content)
        voice_file.name = "voice.ogg"  

        transcription = await client.audio.transcriptions.create(
            model="whisper-1",
            file=voice_file
        )

        await decrement_midia_limit(message.from_user.id)
        return transcription.text

    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"




# –í–∏–¥–µ–æ -> –ê—É–¥–∏–æ -> –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
async def process_video(message):
    try:
        try:
            file_info = await bot.get_file(message.video.file_id)
        except:
            return "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ"
        file_path = file_info.file_path

        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
        response = requests.get(file_url)

        if response.status_code != 200:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª."

        video_file = io.BytesIO(response.content)
        video_file.seek(0) 

        audio_buffer = io.BytesIO()
        with VideoFileClip(video_file) as video:
            audio = video.audio
            if audio:
                audio.write_audiofile(audio_buffer, codec="libmp3lame")
            else:
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞ (gif)"
        
        audio_buffer.seek(0)  

        transcription = await client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_buffer
        )
        await decrement_midia_limit(message.from_user.id)
        return transcription.text

    except:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")  
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)
        
        error_str = error_message.getvalue()

        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª."



# –ö—Ä—É–∂–æ—á–µ–∫ -> –ê—É–¥–∏–æ -> –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
async def process_video_note(message):
    try:
        base_dir = Path(__file__).parent / "downloads" / str(message.chat.id)
        if hasattr(message, "message_thread_id") and message.message_thread_id:
            base_dir /= str(message.message_thread_id)
        base_dir.mkdir(parents=True, exist_ok=True)

        temp_video_path = base_dir / "video_note.mp4"
        temp_audio_path = base_dir / f"audio_{message.message_id}.mp3"

        try:
            file_info = await bot.get_file(message.video_note.file_id)
        except:
            return "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
        file_path = file_info.file_path

        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
        response = requests.get(file_url)

        if response.status_code != 200:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–∞")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫."

        with open(temp_video_path, "wb") as temp_video_file:
            temp_video_file.write(response.content)

        with VideoFileClip(str(temp_video_path)) as video:
            if video.audio is None:
                logging.error("–£ –≤–∏–¥–µ–æ –Ω–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏")
                return "–í–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ."
            
            video.audio.write_audiofile(str(temp_audio_path), codec="libmp3lame")

        with open(temp_audio_path, "rb") as audio_file:
            transcription = await client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
            )

        await decrement_midia_limit(message.from_user.id)
        return transcription.text

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–∞")
        error_message = io.StringIO()
        traceback.print_exc(file=error_message)

        error_str = error_message.getvalue()
        await bot.send_message(CHAT_LOGOV_ID, f"‚ö†Ô∏è ERROR ‚ö†Ô∏è:\n\n{error_str}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫."

    finally:
        try:
            if temp_video_path.exists():
                temp_video_path.unlink()
            if temp_audio_path.exists():
                temp_audio_path.unlink()
        except Exception as cleanup_error:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleanup_error}")



# –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await bot.polling()


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(start())